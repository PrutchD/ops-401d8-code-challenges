#!/usr/bin/env python3

# Script Name:                  Ops 401d8 Challenge 31
# Author:                       David Prutch
# Date of latest revision:      08/21/2023
# Purpose:                      Including the following Additions to ops_431_Signature_based_Malware_Detection_Part_1.py 
                                # Alter your search code to recursively scan each file and folder in the user input directory path and print it to the screen.
                                # For each file scanned within the scope of your search directory:
                                    # Generate the fileâ€™s MD5 hash using Hashlib.
                                    # Assign the MD5 hash to a variable.
                                    # Print the variable to the screen along with a timestamp, file name, file size, and complete (not symbolic) file path.

# Import Libraries
# Import required modules for the script
import os
import subprocess
import hashlib
from datetime import datetime
import platform

# Get your system
# Determine the operating system the script is running on
my_os = platform.system()

# Define Functions

# Function for searching files on Linux
def linux_search():
    # Ask the user for the file name and search directory
    filename = input("Enter the file name to search for: ")
    search_directory = input("Enter the directory to search in: ")

    # Check if the specified directory exists
    if not os.path.exists(search_directory):
        print("Error: The specified directory does not exist.")
        return

    # Initialize counters for searched files and hits
    searched_files = 0
    hits = 0

    # Traverse through the directory and its subdirectories
    for root, _, files in os.walk(search_directory):
        for file in files:
            # Check if the current file matches the desired filename
            if file == filename:
                # Print the location of the found file
                file_path = os.path.join(root, file)
                print(f"Found: {filename} at {file_path}")
                hits += 1
                # Calculate and print file hash and metadata
                hash_file(file_path)
            searched_files += 1

    # Display search summary
    print("\nSearch completed.")
    print(f"Total files searched: {searched_files}")
    print(f"Total hits found: {hits}")

# Function for searching files on Windows
def windows_search():
    # Ask the user for the file name and search directory
    filename = input("Enter the file name to search for: ")
    search_directory = input("Enter the directory to search in: ")

    # Check if the specified directory exists
    if not os.path.exists(search_directory):
        print("Error: The specified directory does not exist.")
        return

    # Build the command to search for the file using Windows dir command
    cmd = f'dir /s /b {os.path.join(search_directory, filename)}'

    try:
        # Execute the command and capture the result
        result = subprocess.check_output(cmd, shell=True, text=True)
        hit_files = result.strip().split('\n')
        if hit_files:
            # Print the locations of the found files
            for file in hit_files:
                print(f"Found: {filename} at {file}")
                # Calculate and print file hash and metadata
                hash_file(file)
        else:
            print(f"{filename} not found in the specified directory.")

    except subprocess.CalledProcessError:
        print("An error occurred while searching.")

# Function to generate and print the MD5 hash
def hash_file(file_path):
    try:
        # Open the file in binary read mode
        with open(file_path, "rb") as f:
            md5_hash = hashlib.md5()
            # Read and update hash in chunks
            while chunk := f.read(1024):
                md5_hash.update(chunk)
            # Get file size and current timestamp
            file_size = os.path.getsize(file_path)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            # Print hash, metadata, and timestamp
            print(f"Timestamp: {timestamp}")
            print(f"File Name: {os.path.basename(file_path)}")
            print(f"File Size: {file_size} bytes")
            print(f"File Path: {file_path}")
            print(f"MD5 Hash: {md5_hash.hexdigest()}\n")
    except Exception as e:
        print(f"Error hashing {file_path}: {e}\n")

# Main
# Check the operating system and call the appropriate search function
if my_os == "Linux":
    linux_search()
elif my_os == "Windows":
    windows_search()
else:
    print("Your OS is not compatible with this script.")
