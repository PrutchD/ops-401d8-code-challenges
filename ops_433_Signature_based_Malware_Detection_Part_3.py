#!/usr/bin/env python3

# Script Name:                  Ops 401d8 Challenge 32
# Author:                       David Prutch
# Date of latest revision:      08/23/2023
# Purpose:                      Including the following Additions to ops_432_Signature_based_Malware_Detection_Part_2.py 
                                # Successfully connect to the VirusTotal API
                                # Automatically compare your target fileâ€™s md5 hash with the hash values of entries on VirusTotal API
                                # Print to the screen the number of positives detected and total files scanned

####################

# This script requires an api key for Virus Total and needs that key to be set as an environmental variable named API_KEY_VIRUSTOTAL
# Also requires virustotal-search.py to be downloaded to the same directory.

####################

# Import Libraries
# Import required modules for the script
import os
import subprocess
import hashlib
from datetime import datetime
import platform
import requests

# Get your system
# Determine the operating system the script is running on
my_os = platform.system()

# Define Functions

# Function for searching files on Linux
def linux_search():
    # Ask the user for the file name and search directory
    filename = input("Enter the file name to search for: ")
    search_directory = input("Enter the directory to search in: ")

    # Check if the specified directory exists
    if not os.path.exists(search_directory):
        print("Error: The specified directory does not exist.")
        return

    searched_files = 0

    for root, _, files in os.walk(search_directory):
        for file in files:
            file_path = os.path.join(root, file)
            print(f"Scanning file: {file_path}")
            hash_and_print(file_path)
            searched_files += 1

    print("\nSearch completed.")
    print(f"Total files scanned: {searched_files}")

# Function for searching files on Windows
def windows_search():
    filename = input("Enter the file name to search for: ")
    search_directory = input("Enter the directory to search in: ")

    if not os.path.exists(search_directory):
        print("Error: The specified directory does not exist.")
        return

    cmd = f'dir /s /b {os.path.join(search_directory, filename)}'

    try:
        result = subprocess.check_output(cmd, shell=True, text=True)
        hit_files = result.strip().split('\n')
        if hit_files:
            for file in hit_files:
                print(f"Scanning file: {file}")
                hash_and_print(file)
        else:
            print(f"{filename} not found in the specified directory.")

    except subprocess.CalledProcessError:
        print("An error occurred while searching.")

# Function to generate MD5 hash, print metadata, display information, and check VirusTotal
def hash_and_print(file_path):
    try:
        with open(file_path, "rb") as f:
            md5_hash = hashlib.md5()
            while chunk := f.read(8192):
                md5_hash.update(chunk)
            file_size = os.path.getsize(file_path)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"Timestamp: {timestamp}")
            print(f"File Name: {os.path.basename(file_path)}")
            print(f"File Size: {file_size} bytes")
            print(f"File Path: {file_path}")
            print(f"MD5 Hash: {md5_hash.hexdigest()}\n")
            positives = check_file_hash_virustotal(md5_hash.hexdigest())
            if positives is not None:
                print(f"Number of positives on VirusTotal: {positives}\n")
            else:
                print("Error retrieving VirusTotal information.\n")
    except Exception as e:
        print(f"Error scanning {file_path}: {e}\n")

# Function to check file hash on VirusTotal
def check_file_hash_virustotal(hash_value):
    apikey = os.getenv('API_KEY_VIRUSTOTAL')
    url = f'https://www.virustotal.com/api/v3/files/{hash_value}'
    headers = {'x-apikey': apikey}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        positives = data['data']['attributes']['last_analysis_stats']['malicious']
        return positives
    else:
        return None

# Main
# Check the operating system and call the appropriate search function
if my_os == "Linux":
    linux_search()
elif my_os == "Windows":
    windows_search()
else:
    print("Your OS is not compatible with this script.")
